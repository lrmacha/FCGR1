
#Using the ‘Modeller executable command line’ 
Modeller.automodel import*
#overide the regular LoopModel class to select own loops class MyLoop (LoopModel):
# This routine picks the residues to be refined by loop modelling def select loop atoms(self) :
# one loop from residues x to x inclusive return Selection (self.residue_range (‘x:’, ‘x’))
Env = Environ()
# build 5 loop models from  4W4O_1_1.pdb, and assess each one with DOPE
A = MyLoop (env, inimodel=’../step6_fit/4W4O_1_1.pdb’,
 		Sequence= ‘4W4O’, loop_assess_methods=assess.DOPE)
a.loop.starting_model = 1
a.loop.ending_model = 5
a.make()

The above script outputs the variants linked with 4W4Oonly the determined residues (termed x here) are moved in the optimisation, the remaining residues remain ‘fixed points’.

from_future_import print_function
from modeller import *
from modeller.scripts import complete pdb
log.verbose()
env=environ()
env.libs.toplogy.read(‘${LIB}/top_heav.lib’)
env.libs.parameters.read(‘${LIB}/par.lib’)

maps=’../step6_fit/4W4O10A.mrc’
resolution=10.0
box_size=48
apix=1,88
x=-26.742; y=-9.5205; z=-10.375 #origin
m1 = model (env, file=’../step6_fit/4W4O_1_1.pdb’)
sel = selection(m1).only_atom_types(‘CA’)
scal – physical.Values(default=0., em_density=1.0)
results = 1
filenames = [‘../step6_fit/4W4O_1_1.pdb’]
for i in range (1, 6):
		filenames.append(‘4W4O.pdb’)
for fname in filenames:
m2 = complete_pdb(env, fname)
aln = Alignment (env)
aln.append_model (m1, align_codes=’fitted’)
aln.append_model (m2, align_codes=’model’)
sel.superpose(m2, aln)
den = density (env, file=map, em_density_format=’mrc’,
		Voxel_sixe=apix, resolution=resolution,em_map_size=box_size,
		Density_type=’GAUSS;, px=x, py=y, pz=z)
M2.env.edat.density = den
Molpdf, terms = selection (m2).energy  (schedule_scale=scal)
Results.append ( (fname, -‘molpdf’) )
